{
  "name": "react-button",
  "version": "1.2.1",
  "description": "React Button",
  "main": "lib/index.js",
  "scripts": {
    "test": "make",
    "lib": "./node_modules/.bin/gulp",
    "build-style": "./node_modules/.bin/webpack --progress --colors --config build-style.config.js",
    "dist": "./node_modules/.bin/webpack --progress --colors --config dist.config.js",
    "dist.min": "./node_modules/.bin/webpack --progress --colors --optimize-minimize --optimize-occurence-order --optimize-dedupe --config dist.min.config.js",
    "build": "npm run lib && npm run dist && npm run dist.min",
    "serve": "./node_modules/.bin/http-server -p 9091",
    "dev": "./node_modules/.bin/webpack-dev-server --progress --colors --port 9090 --content-base http://localhost:9091"
  },
  "devDependencies": {
    "css-loader": "^0.9.0",
    "extract-text-webpack-plugin": "^0.3.5",
    "gulp": "^3.8.11",
    "gulp-react": "^2.0.0",
    "http-server": "^0.7.3",
    "jsx-loader": "^0.12.2",
    "style-loader": "^0.8.2",
    "stylus-loader": "^0.4.0",
    "webpack": "^1.4.13",
    "webpack-dev-server": "^1.6.6"
  },
  "dependencies": {
    "object-assign": "^2.0.0",
    "react-style-normalizer": "^1.1.5"
  },
  "peerDependencies": {
    "react": ">=0.12.0"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/zippyui/react-button.git"
  },
  "keywords": [
    "button",
    "react-component",
    "react",
    "ui"
  ],
  "author": {
    "name": "ZippyUI",
    "email": "contact@zippyui.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/zippyui/react-button/issues"
  },
  "homepage": "https://github.com/zippyui/react-button",
  "readme": "react-button\n============\n\n> A carefully crafted button for React\n\n## Install\n\n```sh\n$ npm install react-button --save\n```\n\n## Changelog\n\nSee [Changelog](./CHANGELOG.md)\n\n## Usage\n\n```jsx\nvar Button = require('react-button')\n\nfunction clicked(event){}\n\n<Button onClick={clicked} >Export</Button>\n\n<Button activeStyle={{position:'relative', top: 1}}>Save as</Button>\n```\n\n`react-button` does not depend on any css files. All styles are inline in the react component.\n\n`react-button` can also be used as a toggle button\n```jsx\nvar pressed = true\nfunction toggle(){\n\tpressed = !pressed\n\n\t//now re-render\n}\n//controlled behavior\n<Button pressed={pressed} onClick={toggle}/>\n\n//uncontrolled\n<Button defaultPressed={true} pressedStyle={{color: 'blue'}} />\n```\n\n### Styling & advanced usage\n\nBy default, the button comes with some structural styles as well as with styles for a default nice theme.\n\nIf you don't want the button to render with the default theme, just specify `theme=''` (or any falsy value).\n\n```jsx\n<Button theme='' onClick={function(){}} />\n```\n\nOr you can specify your own theme for the button.\nThe value for the `theme` property is just an object with different styles\n\n```jsx\nvar theme = {\n\tdisabledStyle: { background: 'gray'},\n\toverStyle: { background: 'red'},\n\tactiveStyle: { background: 'red'},\n\tpressedStyle: {background: 'magenta', fontWeight: 'bold'},\n\toverPressedStyle: {background: 'purple', fontWeight: 'bold'}\n}\n\n<Button theme={theme} defaultPressed={true}/>\n```\nOr, you can specify a theme as string: 'default' or 'primary'. Those are the only two themes that come built into the `ReactButton`. You can get the styles for these:\n\n```jsx\nvar themes = require('react-button').themes\nthemes.gray = {\n\tstyle: {...},\n\toverStyle: {...}\n}\n<Button theme={themes.primary} />\n\n//since 'gray' is added to the exported theme object,\n//you can use it as a named theme\n<Button theme='gray' />\n```\n\nYou can style different button states - over (when mouse is over button), active (when mouse is down on the button)\n\n```jsx\n<Button overStyle={{background: 'blue'}} activeStyle={{background: 'red'}} />\n```\nIf you specify `overStyle`, `activeStyle`, `pressedStyle`, `overPressedStyle` etc, you are overwriting the values from the theme. The theme styles have the lowest precedence.\n\n## Properties\n\n### Actions\n\n * onClick: Function - function to be called when the button is clicked\n * onToggle: Function(pressed: boolean, event) - called on a button that specifies either `pressed` or `defaultPressed` (as boolean values). This is called before `onClick`\n * onActivate: Function - function called on mousedown over the button - button becomes active\n * onDeactivate: Function - function called on mouseup - button becomes inactive\n\n### Styling\n\n#### Theming props\n\n * theme: Object/String - a theme object (or a falsy value, if you don't want to render a themed button) or a string which should be a key from the exported `Button.themes`\n * themes: Object - another object where to look for themes. This defaults to `Button.themes`, but it can be modified using this property\n\n If you want to modify the default look for all buttons, just modify `Button.themes.default`\n\n```jsx\nvar Button = require('react-button')\n\nvar themes = Button.themes\n\nthemes.default.style     = { ... }\nthemes.default.overStyle = { ... }\n\n<Button>save</Button>\n\n```\n\n#### Style props\n\nStyle props are applied in this order:\n\n * style - default style\n * disabledStyle - style to be applied when the button is disabled. If disabled, no other over/active/pressed styles are applied.\n * focusedStyle - style to be applied to focused button\n * pressedStyle\n\n * focusedPressedStyle\n\n * overStyle\n * overFocusedStyle\n * overPressedStyle\n * overFocusedPressedStyle\n\n * activeStyle - style to be applied on active button (mousedown over button)\n * activeFocusedStyle\n * activePressedStyle\n * activeFocusedPressedStyle\n\nYou can set all these props both on the theme object, or on the button itself.\n\n### Styling with CSS classes\n * overClassName: String - a css class to be applied when the mouse is over the button\n * activeClassName: String - a css class to be applied when the mouse is pressed on the button (the button is in active state)\n * focusedClassName: String - a css class to be applied when the button is focused\n * disabledClassName: String - a css class to be applied when the button is disabled\n * pressedClassName: String - a css class to be applied when the button is pressed\n\n### Other attributes\n * disabled: Boolean\n * pressed: Boolean\n * defaultPressed: Boolean\n * label - (generally a string) you can specify a label instead of button children. If you specify the label, by default it will be rendered with text-overflow: 'ellipsis'\n * href: String - a href to navigate to when the button is clicked. Defaults to ''\n * align: String - where to align content inside button. Valid values are 'left', 'center', 'right'\n * 'block': Boolean - by default buttons are rendered with display `inline-flex`. Specify `block: true` if you want to use `display: flex` (or use style.display: 'flex').\n * onStyleReady: Function - called after the style object is fully constructed\n * onThemeStyleReady: Function - called after the theme styles have been applied to the style object (before `onStyleReady`)\n\n## Contributing\n\n```sh\n$ npm install\n$ npm run dev # to start webpack-dev-server\n$ npm run serve # to start http-server on port 9091\n```\n\nnow navigate to [localhost:9091](http://localhost:9091)\n\n## License\n\n#### MIT",
  "readmeFilename": "README.md",
  "_id": "react-button@1.2.1",
  "dist": {
    "shasum": "c5ae66b1cab92c671bbdfe39de56c6899ba95e1f"
  },
  "_from": "react-button@",
  "_resolved": "https://registry.npmjs.org/react-button/-/react-button-1.2.1.tgz"
}
